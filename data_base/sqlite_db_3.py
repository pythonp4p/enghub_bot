import sqlite3 as sq
from tkinter.messagebox import Message
from create_bot import bot

# Так как бот ассинхронный, он использует один поток исполнения. Соответственно, нам сюда подойдет
# любая база данных как sqlite. sqlite3 это модуль по работе с этой базой данных. ЭТО ВСТРОЕННАЯ БАЗА ДАННЫХ,
# ОНА РАБОТАЕТ ПРЯМ В ПРИЛОЖЕНИИ. НЕ ТРЕБУЕТЬСЯ НИКАКОЙ ОТДЕЛЬНЫЙ СЕРВЕР ПОТОТМУ ЧТО ОНА ИСПОЛНЕНА В ВИДЕ
# ОДНОГО ФАЙЛА.

#!                            Первая функция для добавления данных в базу данных                            #
def sql_start():
    global base, cur
    base = sq.connect('mom_bot_2.db')
    cur = base.cursor()
    if base:
        print('База данных успешно открыта')
    base.execute('CREATE TABLE IF NOT EXISTS self(img TEXT, name TEXT PRIMARY KEY, description TEXT, price BLOB)')
    base.commit()

#!                    Вторая функция в которой мы будем вносить изменения в базу данных                    !#

async def sql_add_command(state):
    async with state.proxy() as data:
        cur.execute('INSERT INTO self VALUES(?, ?, ?, ?)', tuple(data.values()))
        base.commit()
        print('Данные добавлены в базу данных')

#!                            Третья функция                             #
async def sql_read(message):
    for ret2 in cur.execute("SELECT * FROM self").fetchall():
        await bot.send_photo(message.from_user.id, ret2[0], f'{ret2[1]}\nОпис: {ret2[2]}\nПосилання: {ret2[-1]}')

async def sql_read2():
    return cur.execute("SELECT * FROM self").fetchall()

async def sql_delete_commanddd(data):
    cur.execute('DELETE FROM self WHERE name = ?', (data,))
    base.commit()


#!                            Первая функция для добавления данных в базу данных                            #


# ! Для начала мы здесь определяем функцию в которой пишем создание самой базы данных.
# ! Или подключение если она уже создана

#? Для этого, нам необходимо: для начала заводим переменную base, записывем sq, мы его импортировали
#? и метод CONNECT, ОН ПОЗВОЛЯЕТ ПОДКЛЮЧИТЬСЯ К ФАЙЛУ БАЗЫ ДАННЫХ. ЕСЛИ ТАКОГО ФАЙЛА НЕ БУДЕТ, ОН СОЗДАСТЬСЯ,
#? ЕСЛИ ОН БУДЕТ, ТО ПРОСТО ПРОИЗОЙДЕТ К НЕМУ ПОДКЛЮЧЕНИЕ.


#* ДАЛЕЕ, нам необходимо создать CURSOR, ЭТО ИМЕННО ТА ЧАСТЬ БАЗЫ ДАННЫХ КОТОРАЯ ОСУЩЕСТВЛЯЕТ ПОИСК,
#* ВСТРАИВАНИЕ И ВЫБОРКУ ДАННЫХ ИЗ БАЗЫ ДАННЫХ.

#* И так, мы создаем cursor, он у нас отталкиваеться от созданого экземпляра CONNECTа.
#* Тоесть у нас здесь подключение к базе данных.

#~ Потом делаем такую фишку, что когда бот подключаеться к базе данных, он будет
#~ выводить нам в терминал 'База данных успешно открыта'.

#& И теперь, записываем команду base.execute, мы здесь создаем таблицу в которую будем вносить данные.
#& CREATE TABLE IF NOT EXISTS это означает создать таблицу если такой не существует.
#& Тоесть в последущих запусках бота, эта запись позволяет не создавать новую таблицу,
#& а просто добавлять данные в таблицу.

#& И того, у нас будет таблица menu, в которой нам необходимо 4 столбца. Конкретно: 1.столбец это картинка.
#& 2.столбец это названиенашей пиццы. 3.столбец это первичный ключ, тоесть повторяться названия у нас не будут.
#& 4.столбец это описание нашей пиццы. 5.столбец это цена нашей пиццы.
#& И командой base.commit(), мы зафиксируем все изменения в базе данных. Сохраняем



#!                    Вторая функция в которой мы будем вносить изменения в базу данных                    !#


#^ Теперь, создаем вторую функцию, в которую будем записывать изменения в нашу базу данных

#^ И в этой функции, в параметр state ПОПАДАЕТ НАШЕ СОСТОЯНИЕ БОТА.

#^ И мы ассинхронно запускаем менеджер контекста,
#^ в котором мы будем записывать изменения в базу данных. И открываем словарь

#^ И теперь используя наш CURSOR, комманда .execute, тоесть исполнить. Вставляем в таблицу menu значения.
#^ Подставляем их безопасно, для избежания SQL-инъекций. И сюда подставляем значение data.values().
#^ И при помощи tuple переводим в кортеж.

#^ И сохраняем наши измененния


#!                            Третья функция                             #
#* В параметр message мы получаем событие нашего сообщения, когда срабатывает хендлер на кнопку "МЕНЮ"

#* В цикле for мы делаем слeдующую SQL-команду: Нам необходимо выбрать все из нашей таблицы menu.
#* Применяем метод .fetchall() который выгружает все данные из нашей таблицы. сюда в виде списка
#* У нас получаеться список из строк нашей таблицы. И помещаем это в переменную

#* И теперь, через оператор await отправляем каждую строку этой таблицы поьзователю в личку разбирая ее
#* Непосредственно, отправляем фотку и формируем f-строку в которой отправляем:
#* название нашей пиццы, с новой строки описание и в конце также с новой строки цену
